---
title: "Vectorization"
format: html
editor: visual
---

The exercises in this document follow along closely with [Lesson 9](https://swcarpentry.github.io/r-novice-gapminder/09-vectorization.html) of [R for Reproducible Scientific Analysis](https://swcarpentry.github.io/r-novice-gapminder/), provided by the [Software Carpentry](https://software-carpentry.org/) community under the creative commons license, [CC-BY 4.0](https://creativecommons.org/licenses/by/4.0/). For more information see [The Carpentries](https://carpentries.org/).

::: callout-tip
## Key Points

-   Use vectroized options instead of loops
:::

```{r}
library(gapminder)
data(gapminder)

library(ggplot2)
library(cowplot)
theme_set(theme_cowplot())

library(magrittr)
```

#### Challenge 1

Make a new column in the `gapminder` data frame that contains population in units of millions of people. Check the head or tail of the data frame to make sure it worked.

<!-- Challenge 1 answer begin -->

```{r}
gapminder$pop_mill <- gapminder$pop / 1e6
head(gapminder$pop_mill)
```

<!-- Challenge 1 answer end -->

#### Challenge 2a

On a single graph, plot population, in millions, against year, for all countries. Do not worry about identifying which country is which.

<!-- Challenge 2a answer begin -->

```{r}
ggplot(gapminder, aes(year, pop_mill))+
  geom_point()+
  labs(x = "Year", y = "Population (Millions)")
```

<!-- Challenge 2a answer end -->

#### Challenge 2b

Repeat the exercise, graphing only for China, India, and Indonesia. Again, do not worry about which is which.

<!-- Challenge 2b answer begin -->

```{r}
gapminder[gapminder$country %in% c("China", "India", "Indonesia"),] %>%
ggplot(gapminder, mapping = aes(year, pop_mill))+
  geom_point()+
  labs(x = "Year", y = "Population (Millions)")
```

<!-- Challenge 2b answer end -->

#### Challenge 3

Given the following matrix:

```{r}
m <- matrix(1:12, nrow=3, ncol=4)
m
```

Write down what you think will happen when you run:

-   `m ^ -1` an exponent of -1 means you would be diving by itself 1 time, meaning each cell should have the value of 1
-   `m * c(1, 0, -1)` I think this would multiply each point in the matrix by all three of these values leaving 3 values per point in the original matrix.
-   `m > c(0, 20)` This will produce two logical values per point in the matrix comparing to each of the values listed.
-   `m * c(1, 0, -1, 2)` This will produce 4 products per point in the matrix based on the values of each point in the list.

Did you get the output you expected? If not and the video didn't clear things up, let me know and we can discuss.

<!-- Challenge 3 answer begin -->

-   `m ^ -1` an exponent of -1 means you would be diving by itself 1 time, meaning each cell should have the value of 1
-   `m * c(1, 0, -1)` I think this would multiply each point in the matrix by all three of these values leaving 3 values per point in the original matrix.
-   `m > c(0, 20)` This will produce two logical values per point in the matrix comparing to each of the values listed.
-   `m * c(1, 0, -1, 2)` This will produce 4 products per point in the matrix based on the values of each point in the list.

I think I did not understand how negative exponents work but now I do! I didn't realize that using the list to use certain functions on our matrix would just implement each value of the list row wise and then iterate if there are more rows in the matrix than there are in the list. When you have more factors listed in the list, it will iterate through the columns instead. Looking back at it I think they were always iterating by column it was just coincidence that we had the same number of rows and columns that it confused me!

<!-- Challenge 3 answer end -->

#### Challenge 4a

We're interested in looking at the sum of the following sequence of fractions:

```         
x = 1/(1^2) + 1/(2^2) + 1/(3^2) + ... + 1/(n^2)
```

This would be tedious to type out, and impossible for high values of $n$. Use vectorization to compute $x$ when $n=100$.

<!-- Challenge 4a answer begin -->

```{r}
sum(1 / (1:100)^2)
```

<!-- Challenge 4a answer end -->

#### Challenge 4b

What is the sum when $n=10,000$?

<!-- Challenge 4b answer begin -->

```{r}
n <- 1e4
sum(1 / (1:n)^2)
```

<!-- Challenge 4b answer end -->
